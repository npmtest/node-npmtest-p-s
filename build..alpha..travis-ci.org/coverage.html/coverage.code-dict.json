{"/home/travis/build/npmtest/node-npmtest-p-s/test.js":"/* istanbul instrument in package npmtest_p_s */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-p-s/lib.npmtest_p_s.js":"/* istanbul instrument in package npmtest_p_s */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_p_s = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_p_s = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-p-s/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-p-s && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_p_s */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_p_s\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_p_s.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_p_s.rollup.js'] =\n            local.assetsDict['/assets.npmtest_p_s.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_p_s.__dirname + '/lib.npmtest_p_s.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-p-s/node_modules/p-s/dist/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _spawnCommandWithKill = require('spawn-command-with-kill');\n\nvar _spawnCommandWithKill2 = _interopRequireDefault(_spawnCommandWithKill);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _commonTags = require('common-tags');\n\nvar _lodash = require('lodash');\n\nvar _findUp = require('find-up');\n\nvar _managePath = require('manage-path');\n\nvar _managePath2 = _interopRequireDefault(_managePath);\n\nvar _arrify = require('arrify');\n\nvar _arrify2 = _interopRequireDefault(_arrify);\n\nvar _getScriptToRun = require('./get-script-to-run');\n\nvar _getScriptToRun2 = _interopRequireDefault(_getScriptToRun);\n\nvar _getScriptsFromConfig = require('./get-scripts-from-config');\n\nvar _getScriptsFromConfig2 = _interopRequireDefault(_getScriptsFromConfig);\n\nvar _getLogger = require('./get-logger');\n\nvar _getLogger2 = _interopRequireDefault(_getLogger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nvar NON_ERROR = 0;\n\nexports.default = runPackageScripts;\n\n\nfunction runPackageScripts(_ref) {\n  var scriptConfig = _ref.scriptConfig,\n      scripts = _ref.scripts,\n      _ref$options = _ref.options,\n      options = _ref$options === undefined ? {} : _ref$options;\n\n  if (scripts.length === 0) {\n    scripts = ['default'];\n  }\n  var scriptNames = (0, _arrify2.default)(scripts);\n\n  return scriptNames.reduce(function (res, input) {\n    return res.then(function () {\n      return runPackageScript({ scriptConfig, options, input });\n    });\n  }, Promise.resolve());\n}\n\nfunction runPackageScript(_ref2) {\n  var scriptConfig = _ref2.scriptConfig,\n      options = _ref2.options,\n      input = _ref2.input;\n\n  var _input$split = input.split(' '),\n      _input$split2 = _toArray(_input$split),\n      scriptPrefix = _input$split2[0],\n      args = _input$split2.slice(1);\n\n  var scripts = (0, _getScriptsFromConfig2.default)(scriptConfig, scriptPrefix);\n  var script = (0, _getScriptToRun2.default)(scripts, scriptPrefix);\n  if (!(0, _lodash.isString)(script)) {\n    return Promise.reject({\n      message: _chalk2.default.red(_commonTags.oneLine`\n          Scripts must resolve to strings.\n          There is no script that can be resolved from \"${scriptPrefix}\"\n        `),\n      ref: 'missing-script'\n    });\n  }\n  var command = [script].concat(_toConsumableArray(args)).join(' ').trim();\n  var log = (0, _getLogger2.default)((0, _getLogger.getLogLevel)(options));\n  log.info(_chalk2.default.gray('nps executing: ') + _chalk2.default.green(command));\n  var child = void 0;\n  return new Promise(function (resolve, reject) {\n    child = (0, _spawnCommandWithKill2.default)(command, { stdio: 'inherit', env: getEnv() });\n\n    child.on('error', function (error) {\n      reject({\n        message: _chalk2.default.red(_commonTags.oneLine`\n            The script called \"${scriptPrefix}\"\n            which runs \"${command}\" emitted an error\n          `),\n        ref: 'emitted-an-error',\n        error\n      });\n    });\n\n    child.on('close', function (code) {\n      if (code === NON_ERROR) {\n        resolve(code);\n      } else {\n        reject({\n          message: _chalk2.default.red(_commonTags.oneLine`\n              The script called \"${scriptPrefix}\"\n              which runs \"${command}\" failed with exit code ${code}\n            `),\n          ref: 'failed-with-exit-code',\n          code\n        });\n      }\n    });\n  });\n}\n\nfunction getEnv() {\n  var env = (0, _lodash.clone)(process.env);\n  var alterPath = (0, _managePath2.default)(env);\n  var npmBin = (0, _findUp.sync)('node_modules/.bin');\n  if (npmBin) {\n    alterPath.unshift(npmBin);\n  }\n  return env;\n}","/home/travis/build/npmtest/node-npmtest-p-s/node_modules/p-s/dist/get-script-to-run.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _prefixMatches3 = require('prefix-matches');\n\nvar _prefixMatches4 = _interopRequireDefault(_prefixMatches3);\n\nvar _resolveScriptObjectToString = require('./resolve-script-object-to-string');\n\nvar _resolveScriptObjectToString2 = _interopRequireDefault(_resolveScriptObjectToString);\n\nvar _kebabAndCamelCasify = require('./kebab-and-camel-casify');\n\nvar _kebabAndCamelCasify2 = _interopRequireDefault(_kebabAndCamelCasify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = getScriptToRun;\n\n\nfunction getScriptToRun(config, input) {\n  config = (0, _kebabAndCamelCasify2.default)(config);\n  // remove the default objects/strings so we cancheck\n  // if the prefix works with another script first\n  var defaultlessConfig = removeDefaults((0, _lodash.cloneDeep)(config));\n  var scriptString = getScriptString(defaultlessConfig, input);\n  if (scriptString) {\n    return scriptString;\n  } else {\n    // fallback to the defaults if no other script was\n    // found with the given input\n    return getScriptString(config, input);\n  }\n}\n\nfunction getScriptString(config, input) {\n  var _prefixMatches = (0, _prefixMatches4.default)(input, config),\n      _prefixMatches2 = _slicedToArray(_prefixMatches, 1),\n      script = _prefixMatches2[0];\n\n  return (0, _resolveScriptObjectToString2.default)(script);\n}\n\nfunction removeDefaults(object) {\n  (0, _lodash.each)(object, function (value, key) {\n    if (key === 'default') {\n      delete object[key];\n    } else if ((0, _lodash.isPlainObject)(value)) {\n      object[key] = removeDefaults(value);\n    }\n  });\n  return object;\n}","/home/travis/build/npmtest/node-npmtest-p-s/node_modules/p-s/dist/resolve-script-object-to-string.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveScriptObjectToScript = exports.default = undefined;\n\nvar _lodash = require('lodash');\n\nexports.default = resolveScriptObjectToString;\nexports.resolveScriptObjectToScript = resolveScriptObjectToScript;\n\n\nfunction resolveScriptObjectToString(script) {\n  var scriptObj = resolveScriptObjectToScript(script);\n  if ((0, _lodash.isPlainObject)(scriptObj)) {\n    return scriptObj.script;\n  }\n  return undefined;\n}\n\nfunction resolveScriptObjectToScript(script) {\n  if ((0, _lodash.isPlainObject)(script)) {\n    return resolvePlainObjectToScript(script);\n  } else if ((0, _lodash.isString)(script)) {\n    return { script };\n  }\n  return undefined;\n}\n\nfunction resolvePlainObjectToScript(script) {\n  if (!(0, _lodash.isUndefined)(script.script)) {\n    return script;\n  }\n  if (!(0, _lodash.isUndefined)(script.default)) {\n    return resolveScriptObjectToScript(script.default);\n  }\n  return undefined;\n}","/home/travis/build/npmtest/node-npmtest-p-s/node_modules/p-s/dist/kebab-and-camel-casify.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nexports.default = kebabAndCamelCasify;\n\n\nfunction kebabAndCamelCasify(obj) {\n  return Object.keys(obj).reduce(function (result, key) {\n    var camel = (0, _lodash.camelCase)(key);\n    var kebab = (0, _lodash.kebabCase)(key);\n    var val = obj[key];\n    if ((0, _lodash.isPlainObject)(obj[key])) {\n      val = kebabAndCamelCasify(val);\n    }\n    if (key !== camel || key !== kebab) {\n      result[camel] = val;\n      result[kebab] = val;\n    } else {\n      result[key] = val;\n    }\n    return result;\n  }, obj);\n}","/home/travis/build/npmtest/node-npmtest-p-s/node_modules/p-s/dist/get-scripts-from-config.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nexports.default = getScriptsFromConfig;\n\n\nfunction getScriptsFromConfig(scripts, input) {\n  if ((0, _lodash.isPlainObject)(scripts)) {\n    return scripts;\n  } else if ((0, _lodash.isFunction)(scripts)) {\n    return scripts(input);\n  }\n  return {};\n}","/home/travis/build/npmtest/node-npmtest-p-s/node_modules/p-s/dist/get-logger.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLogLevel = undefined;\n\nvar _console = require('console');\n\nvar _console2 = _interopRequireDefault(_console);\n\nvar _arrify = require('arrify');\n\nvar _arrify2 = _interopRequireDefault(_arrify);\n\nvar _commonTags = require('common-tags');\n\nvar _lodash = require('lodash');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _require = require('../package.json'),\n    version = _require.version;\n\nvar shouldLog = {\n  // fn called         logLevels\n  info: getShouldLogFn('', 'debug', 'info'),\n  warn: getShouldLogFn('', 'debug', 'info', 'warn'),\n  error: getShouldLogFn('', 'debug', 'info', 'warn', 'error')\n};\n\nexports.default = getLogger;\nexports.getLogLevel = getLogLevel;\n\n\nfunction getLogger(logLevel) {\n  return {\n    error: getLogFn('error'),\n    warn: getLogFn('warn'),\n    info: getLogFn('info')\n  };\n\n  function getLogFn(name) {\n    return function logFn() {\n      if (shouldLog[name](process.env.LOG_LEVEL || logLevel)) {\n        var message = getMessage.apply(undefined, arguments);\n        _console2.default[name].apply(_console2.default, _toConsumableArray(message)); // eslint-disable-line no-console\n      }\n    };\n  }\n}\n\nfunction getMessage(first) {\n  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  if ((0, _lodash.isPlainObject)(first) && first.message && first.ref) {\n    return [].concat(_toConsumableArray((0, _arrify2.default)(first.message)), [getLink(first.ref), first.error], rest).filter(function (i) {\n      return !!i;\n    });\n  } else {\n    return [first].concat(rest);\n  }\n}\n\nfunction getLink(ref) {\n  return _commonTags.oneLineTrim`\n    https://github.com/kentcdodds/nps/blob/v\n    ${version}\n    /other/ERRORS_AND_WARNINGS.md#\n    ${ref}\n  `;\n}\n\nfunction getShouldLogFn() {\n  for (var _len2 = arguments.length, acceptableValues = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    acceptableValues[_key2] = arguments[_key2];\n  }\n\n  return function shouldLogWithLevel() {\n    var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    logLevel = logLevel.toLowerCase();\n    return !logLevel || (0, _lodash.includes)(acceptableValues, logLevel);\n  };\n}\n\nfunction getLogLevel(_ref) {\n  var silent = _ref.silent,\n      logLevel = _ref.logLevel;\n\n  return silent ? 'disable' : logLevel;\n}"}